// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");

var buildBaseUrlParam = (function (baseUrl) {
  return { baseURL: baseUrl };
});

var buildHeadersParam = (function (headers) {
  const result = {};
  headers.forEach(h => {
    result[h[0]] = h[1];
  })
  return { headers: result };
});

var buildTimeoutParam = (function (timeout) {
  return { timeout: timeout };
});

var buildCredentialsParam = (function () {
  return { withCredentials: true };
});

var buildAuthParam = (function(auth) {
  return { auth: auth };
});

var buildResponseTypeParam = (function(resT) {
  return { responseType: resT };
});

var buildXsrfCookieNameParam = (function (xsrfcn) {
  return { xsrfCookieName: xsrfcn };
});

var buildXsrfHeaderNameParam = (function (xsrfhn) {
  return { xsrfHeaderName: xsrfhn };
});

var buildMaxContentLengthParam = (function (mcl) {
  return { maxContentLength: mcl };
});

var buildMaxBodyLengthParam = (function (mbl) {
  return { maxBodyLength: mbl };
});

var buildProxyParam = (function (proxy) {
  return { proxy: proxy };
});

var buildDecompressParam = (function () {
  return { decompress: true };
});

var buildMaxRedirectsParam = (function (mr) {
  return { maxRedirects: mr };
});

var containerizeReqParams = (function (reqParams, reqParamParts) {
  const result = {...reqParams};
  reqParamParts.forEach(rp => {
    Object.keys(rp).forEach(k => {
      result[k] = rp[k];
    })
  })
  return result;
});

function buildParamsContainer(reqParams, advAjaxParams) {
  var reqParamsParts = Belt_Array.map(advAjaxParams, (function (aap) {
          if (typeof aap === "number") {
            if (aap === /* AjaxWithCredentials */0) {
              return Curry._1(buildCredentialsParam, undefined);
            } else {
              return Curry._1(buildDecompressParam, undefined);
            }
          }
          switch (aap.TAG | 0) {
            case /* AjaxBaseUrl */0 :
                return buildBaseUrlParam(aap._0);
            case /* AjaxHeaders */1 :
                return buildHeadersParam(aap._0);
            case /* AjaxTimeout */2 :
                return buildTimeoutParam(aap._0);
            case /* AjaxAuth */3 :
                return buildAuthParam(aap._0);
            case /* AjaxResponseType */4 :
                return buildResponseTypeParam(aap._0);
            case /* AjaxXsrfCookieName */5 :
                return buildXsrfCookieNameParam(aap._0);
            case /* AjaxXsrfHeaderName */6 :
                return buildXsrfHeaderNameParam(aap._0);
            case /* AjaxMaxContentLength */7 :
                return buildMaxContentLengthParam(aap._0);
            case /* AjaxMaxBodyLength */8 :
                return buildMaxBodyLengthParam(aap._0);
            case /* AjaxMaxRedirects */9 :
                return buildMaxRedirectsParam(aap._0);
            case /* AjaxProxy */10 :
                return buildProxyParam(aap._0);
            
          }
        }));
  return containerizeReqParams(reqParams, reqParamsParts);
}

exports.buildBaseUrlParam = buildBaseUrlParam;
exports.buildHeadersParam = buildHeadersParam;
exports.buildTimeoutParam = buildTimeoutParam;
exports.buildCredentialsParam = buildCredentialsParam;
exports.buildAuthParam = buildAuthParam;
exports.buildResponseTypeParam = buildResponseTypeParam;
exports.buildXsrfCookieNameParam = buildXsrfCookieNameParam;
exports.buildXsrfHeaderNameParam = buildXsrfHeaderNameParam;
exports.buildMaxContentLengthParam = buildMaxContentLengthParam;
exports.buildMaxBodyLengthParam = buildMaxBodyLengthParam;
exports.buildProxyParam = buildProxyParam;
exports.buildDecompressParam = buildDecompressParam;
exports.buildMaxRedirectsParam = buildMaxRedirectsParam;
exports.containerizeReqParams = containerizeReqParams;
exports.buildParamsContainer = buildParamsContainer;
/* No side effect */
